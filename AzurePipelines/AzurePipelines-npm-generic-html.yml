The trigger section specifies the branches that will trigger the pipeline.
The pool section specifies the virtual machine image to use for the pipeline.
The steps section contains the script to execute in the pipeline.
The first step pulls the latest version of the Snyk Docker image.
The second step runs the Snyk scan, saving the results in both JSON and HTML formats.
Additional steps can be added for building, testing, and deploying your application.
Finally, the HTML report generated by Snyk is published as a pipeline artifact, making it accessible after the pipeline run.
Pull specific docker image related to language

trigger:
  branches:
    include:
      - main
      - development

pool:
  vmImage: 'ubuntu-latest'

steps:
  - script: |
      docker pull snyk/snyk:latest
      docker run --rm -v $(pwd):/project -w /project snyk/snyk:latest test --all-projects --json > snyk-results.json
      docker run --rm -v $(pwd):/project -w /project snyk/snyk:latest-to-html snyk-results.json > snyk-results.html
    displayName: 'Run Snyk Scan'

# Add additional steps for building, testing, and deploying your application
# snyk code
  - script: |
      snyk code test --sarif-file-output=results.sarif
      RESULT=$?
      snyk-to-html -o $(Build.ArtifactStagingDirectory)/results-code.html < results.sarif
      exit $RESULT
    continueOnError: true
    displayName: 'snyk code'

  # snyk open source
  - script: |
    snyk test 
    continueOnError: true
    displayName: 'snyk open source'
    
  - script: |
      snyk monitor
    displayName: 'Setup dependency vulnerability monitoring with Snyk'

  # Example of publishing HTML report as a pipeline artifact
  - task: PublishPipelineArtifact@1
    inputs:
      targetPath: '$(Build.SourcesDirectory)/snyk-results.html'
      artifactName: 'SnykScanReport'
